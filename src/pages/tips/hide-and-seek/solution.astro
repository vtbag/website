---
import "./_solution_styles.css";
import Bsky from "../../../components/Bsky.astro";
---

<!doctype html>
<html lang="en" data-vtbag-x="#window @scrollTop">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/bag3.png" type="image/png" />
    <title>Scrolled List Demo | @vtbag</title>
    <meta
      property="og:description"
      content="Without nested groups, view transition images break out of their captivity as soon as the opportunity arises."
    />
    <meta property="og:image" content="/hide-and-seek-og.png" />
    <meta property="og:url" content="/tips/hide-and-seek/" />
    <meta property="og:title" content="Hide and Seek" />
    <meta property="og:type" content="article" />
    <meta property="og:site_name" content="@vtbag" />
    <meta name="twitter:card" content="summary_large_image" />

    <script is:inline>
      const cyberItems = [
        "Quantum Neural Interface",
        "Holographic Data Core",
        "Nano-Tech Augments",
        "Plasma Energy Cells",
        "Binary Dream Encoder",
        "Neural Network Nodes",
        "Cyber-Optic Enhancer",
        "Digital Soul Backup",
        "Quantum Encryption Key",
        "Memory Crystal Array",
        "Bio-Digital Converter",
        "Synthetic Nerve Wire",
        "AI Consciousness Shard",
        "Virtual Reality Seed",
        "Tech-Organic Hybrid",
        "Data Stream Amplifier",
        "Cyber-Kinetic Core",
        "Digital Ghost Protocol",
        "Neural Mesh Network",
        "Quantum Phase Shifter",
      ];

      addEventListener("DOMContentLoaded", () => {
        if ("onpagereveal" in window) return;
        const itemList = document.querySelector("ul.cyber-list");
        itemList.innerHTML = createList(shuffleArray(cyberItems));
        restorescrollPositions(itemList);
      });

      function restorescrollPositions(itemList) {
        const scrollInfo = JSON.parse(
          sessionStorage.getItem("vtbag-hide-seek") ||
            '{"scrollTop":0, "scrollY":0}'
        );
        scrollTo({ top: scrollInfo.scrollY, left: 0, behavior: "instant" });
        itemList.scrollTop = scrollInfo.scrollTop;
      }

      addEventListener("pagereveal", (event) => {
        if (event.viewTransition) {
          if (
            new URL(navigation.activation.from.url, location.href).pathname !==
            "/tips/hide-and-seek/solution/"
          ) {
            //event.viewTransition.skipTransition?.();
          }
        }
        const itemList = document.querySelector("ul.cyber-list");
        itemList.innerHTML = createList(shuffleArray(cyberItems));
        restorescrollPositions(itemList);
        itemList.querySelectorAll("li").forEach((i) => {
          i.style.viewTransitionName = i.innerText.replaceAll(" ", "-");
        });
        setListener();
        if (event.viewTransition) {
          fix(document.querySelector("#d1"), document.querySelector("ul"));
          document
            .querySelectorAll("#vtbag-hide-and-seek-front li")
            .forEach((i) => i.remove());
          event.viewTransition.finished.finally(() =>
            document.querySelector("#vtbag-hide-and-seek-front")?.remove()
          );
        }
      });

      function setListener() {
        document.querySelector("button").addEventListener("click", () => {
          const ul = document.querySelector("#d1 ul");
          sessionStorage.setItem(
            "vtbag-hide-seek",
            JSON.stringify({ scrollTop: ul.scrollTop, scrollY })
          );
          location.href = "/tips/hide-and-seek/solution/";
        });
      }
      function shuffleArray(array) {
        const newArray = [...array];
        for (let i = newArray.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
        }
        return newArray;
      }

      function createList(items, vt) {
        return items.map((item) => `<li>${item}</li>`).join("");
      }
      function cutSVG(element, cutters) {
        if (!element) return;
        const masks = ['<rect width="100%" height="100%" fill="white" />'];
        const outerRect = element.getBoundingClientRect();
        cutters.forEach((cutter) => {
          const inner = cutter.element;
          const insets = cutter.inset.split(" ").map(parseFloat);
          for (let i = 0; i < 4; i++) {
            const len = insets.length;
            insets[i] = isNaN(insets[i] ?? 0)
              ? 0
              : (insets[len === 3 && i === 3 ? 2 : i % len] ?? 0);
          }
          const innerRect = inner.getBoundingClientRect();
          const innerStyle = getComputedStyle(inner);

          const left = parseFloat(innerStyle.borderLeftWidth);
          innerRect.width -=
            left +
            parseFloat(innerStyle.borderRightWidth) +
            insets[1] +
            insets[3];
          innerRect.x += left + insets[3];
          const top = parseFloat(innerStyle.borderTopWidth);
          innerRect.height -=
            top +
            parseFloat(innerStyle.borderBottomWidth) +
            insets[0] +
            insets[2];
          innerRect.y += top + insets[0];
          masks.push(
            `<rect x="${innerRect.x - outerRect.x}" y="${innerRect.y - outerRect.y}" width="${innerRect.width}" height="${innerRect.height}" fill="black" />`
          );
        });
        const svg = `<svg xmlns="http://www.w3.org/2000/svg" width="${outerRect.width}" height="${outerRect.height}">${masks.join("")}</svg>`;
        return svg;
      }
      function fix(larger, smaller) {
        const front = larger.cloneNode(true);
        stripViewTransitionNamesAndIds(front);
        const svg = cutSVG(larger, [
          {
            element: smaller,
            inset: "0 0px 0px 0",
          },
        ]);
        front.style.pointerEvents = "none";
        front.style.viewTransitionName = "vtbag-hide-and-seek-front";
        front.id = "vtbag-hide-and-seek-front";
        front.style.maskImage = `url('data:image/svg+xml;utf8,${svg}')`;
        front.style.maskMode = "luminance";
        front.style.position = "absolute";
        const largerRect = larger.getBoundingClientRect();
        larger.insertAdjacentElement("afterend", front);
        front.style.top = `${largerRect.top + document.documentElement.scrollTop}px`;
        front.style.left = `${largerRect.left + document.documentElement.scrollLeft}px`;
        return front;
      }
      function stripViewTransitionNamesAndIds(element) {
        element.querySelectorAll(":scope, :scope *").forEach((e) => {
          e.removeAttribute("id");
          e.removeAttribute("name");
          e.style.viewTransitionName = "none";
        });
      }
      addEventListener("resize", () => location.reload());
      addEventListener("pageswap", (event) => {
        // @ts-ignore
        if (event.viewTransition) {
          // @ts-ignore
          const url = new URL(event.activation.entry.url, location.href);
          console.log(url.pathname);
          if (url.pathname !== "/tips/hide-and-seek/solution/") {
            // @ts-ignore
            //event.viewTransition.skipTransition?.();
          }
          fix(document.querySelector("#d1"), document.querySelector("ul"));
          document
            .querySelectorAll("#vtbag-hide-and-seek-front li")
            .forEach((i) => i.remove());
        }
      });
    </script>
    {
      (
        // @ts-ignore
        <link rel="expect" href="#body" blocking="render" />
      )
    }
  </head>
  <body id="body">
    <div id="d1">
      <h1><span class="glitch-effect">CYBERTECH INVENTORY</span></h1>
      <ul class="cyber-list"></ul>
      <button class="glitch-effect">RANDOMIZE</button>
      <p style="max-width:640px">
        Ok, not it works nicely! This is demo is rather elaborated solution.
        Keep in mind that view transitions were introduced to make things
        simple. This wasn't. Give us nested transition groups, please! ;-)<br
        />[<a href="/basics/hide-and-seek/#playing-hide--seek"
          >Back to the Hide and Seek page</a
        >] <Bsky />
      </p>
    </div>
  </body>
</html>
