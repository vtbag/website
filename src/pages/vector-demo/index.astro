---
const SIZE = 12;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vector Demo | vtbag.dev</title>
  </head>
  <body>
    <h1>Click somewhere,<br/><kbd id="esc">Esc</kbd> to exit</h1>
    <div class="container">
      <div id="elements-grid"></div>
    </div>
  </body>
</html>

<style set:text=`:root{--size: ${SIZE};}`></style>

<style is:global>
  :root {
    color-scheme: light dark;
    view-transition-name: none;
  }
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    height: 100vh;
  }

  h1 {
    font-size: 4vmin;
    padding: 2em;
  }
  kbd {
    font-family: inherit;
    font-size: 0.875em;
    padding: 0.2em 0.4em;
    border: 1px solid light-dark(#999, #666);
    border-radius: 4px;
    background: light-dark(#f7f7f7, #333);
    box-shadow: inset 0 -2px 0 light-dark(#d1d1d1, #111);
    color: light-dark(#333, #f7f7f7);
    font-weight: 600;
    cursor: pointer;
  }
  .container {
    display: flex;
    height: calc(50vh + 4vmin + 4em);
    justify-content: center;
    align-items: center;
  }

  #elements-grid {
    display: grid;
    width: 100px;
    height: 90vh;
    grid-template-columns: repeat(1, 1fr);
    gap: 10px;
  }

  .element {
    width: calc(66vmax / var(--size));
    height: calc(66vmax / var(--size));
    view-transition-class: el;
  }

  .element:hover {
    transform: scale(1.1);
  }
  .circle {
    border-radius: 50%;
  }

  .square {
    border-radius: 5px;
  }

  #shuffle-btn {
    display: block;
    margin: 0 auto;
    padding: 1rem 2rem;
    font-size: 1.2rem;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
    box-shadow: 0 4px 6px rgba(128, 128, 128, 0.5);
    view-transition-name: shuffle;
  }

  #shuffle-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
  }

  #shuffle-btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  /* This is it */
  ::view-transition-group(*) {
    animation-duration: 1s;
    animation-timing-function: ease-out;
  }

  ::view-transition-image-pair(.el) {
    animation-name: arc;
    animation-timing-function: ease-in-out;
  }
  @keyframes arc {
    50% {
      transform: translateX(
        calc(var(--vtbag-vector-to-y) / 3 - var(--vtbag-vector-from-y) / 3)
      );
    }
  }

  /* And some tweaks for horizontal mode */

  @media (orientation: landscape) {
    #elements-grid {
      grid-template-columns: repeat(var(--size), 1fr);
      height: 100px;
      width: 90vw;
      gap: 10px;
    }
    @keyframes arc {
      50% {
        transform: translateY(
          calc(var(--vtbag-vector-to-x) / 3 - var(--vtbag-vector-from-x) / 3)
        );
      }
    }
  }
</style>

<script is:inline set:text=`window.SIZE = ${SIZE}` />
<script>
  import { mayStartViewTransition } from "@vtbag/utensil-drawer/may-start-view-transition";
  import { setVectors } from "@vtbag/utensil-drawer/vectors";

  // Color palettes for gradients
  const colorPalettes = [
    ["#FF6B6B", "#4ECDC4"],
    ["#A8E6CF", "#FFD3B6"],
    ["#FFAAA5", "#FFD3B6"],
    ["#FF9A8B", "#FF6A88"],
    ["#4158D0", "#C850C0"],
    ["#0093E9", "#80D0C7"],
    ["#8EC5FC", "#E0C3FC"],
    ["#D9AFD9", "#97D9E1"],
  ];

  let msgs: string[] = [];

  function show(transition: ViewTransition) {
    if (transition) {
      msgs.push("");
      transition.ready.then(() => {
        document.getAnimations().forEach((a: any) => {
          if (!a.animationName.startsWith("-ua-view-transition-group")) return;
          const kfs = a.effect.getKeyframes();
          const from = new DOMMatrix(kfs[0].transform);
          const to = new DOMMatrix(kfs[kfs.length - 1].transform);
          msgs.push(
            `${a.animationName}: (${from.e}, ${from.f}) -> (${to.e}, ${to.f})`
          );
        });
      });
    }
  }

  // @ts-ignore
  function createElements() {
    const grid = document.getElementById("elements-grid")!;
    // @ts-ignore
    for (let i = 0; i < window.SIZE; i++) {
      const element = document.createElement("div");
      element.className = `element ${Math.random() > 0.5 ? "circle" : "square"}`;
      element.style.viewTransitionName = `el-${i}`;
      const palette =
        colorPalettes[Math.floor(Math.random() * colorPalettes.length)];
      element.style.background = `linear-gradient(${Math.floor(Math.random() * 360)}deg, ${palette![0]}, ${palette![1]})`;
      grid.appendChild(element);
    }
  }

  function shuffleElements() {
    const grid = document.getElementById("elements-grid")!;
    const random = [...grid.querySelectorAll(".element")].sort(
      () => Math.random() - 0.5
    );
    grid.innerHTML = "";
    random.forEach((element) =>
      grid.insertAdjacentElement("beforeend", element)
    );
  }

  document.addEventListener("DOMContentLoaded", () => {
    createElements();
    addEventListener("click", async () => {
      const transition = mayStartViewTransition(shuffleElements);

      show(transition);
      transition.ready.then(() => setVectors());
    });
  });
  document.getElementById("esc")!.addEventListener("click", ()=>history.back());
  document.addEventListener("keydown", (event)=>event.key === "Escape" && history.back());
</script>
